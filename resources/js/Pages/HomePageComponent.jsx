import React from 'react';
import SwiperHomeComponent from "../components/Sliders/SwiperHomeComponent";
import SwiperAdvertisementProductsComponent from "../components/Sliders/SwiperAdvertisementProductsComponent";
import classes from "./HomePageComponent.module.scss"


const HomePageComponent = () => {
    return (
        <div className={classes.home}>
            {/*<SwiperHomeComponent/>
            <SwiperAdvertisementProductsComponent title={"Акции"}/>*/}
            <h1 className={classes.title}>О проекте:</h1>
            <h2 className={classes.subTitle}> Функциональные блоки проекта:</h2>
            <ul className={classes.list}>
                <li>
                    <h3 className={classes.listTitle}>Аутентификация и авторизация:</h3>
                    <p className={classes.listItemText}>
                        Для аутентификации и авторизации на стороне сервера используется Sanctum. Данные проходят
                        валидацию на сервере, а информация об ошибках выводится во всплывающем окне, которое
                        используется для аутентификации. Присутствует функция "Запомнить меня". Токен хранится в cookie,
                        а время его жизни устанавливается на сервере.
                    </p>
                </li>
                <li>
                    <h3 className={classes.listTitle}>Корзина с товарами:</h3>
                    <p className={classes.listItemText}>Данные корзины хранятся в таблице для авторизованных
                        пользователей, а для неавторизованных пользователей данные хранятся в localStorage для
                        сохранения после завершения сессии. Корзина предоставляет возможность добавления, изменения
                        количества и удаления товаров для авторизированных и неавторизированных пользователей.
                    </p>
                </li>
                <li>
                    <h3 className={classes.listTitle}>Фильтрация и сортировка товаров</h3>
                    <p className={classes.listItemText}>
                        Для каждой категории загружаются данные фильтра для соответствующей категории и ее дочерних
                        категорий, также формируется атрибут для фильтрации товаров по цене (с сервера приходит
                        информация о максимальной и минимальной цене товаров, при выбранных опциях фильтра). Возле
                        каждой опции атрибута фильтра отображается сколько товаров будет найдено, при выборе
                        этой опции, с учетем уже выбранных опций, если это количество равно нулю, опция не будет
                        передаваться на frontend. Сервер фильтрует эти опции и атрибуты, у которых все опции имеют
                        нулевое количество совпадений. Фильтр пересчитывается после изменения состояния фильтра, но не
                        применяется для фильтрации товаров до нажатия кнопки "Применить". Для сортировки товаров
                        необходимо выбрать соответствующую опцию в блоке сортировки. Товары фильтруются и сортируются с
                        использованием заданных опций фильтрации и сортировки, а также отбираются из заданной категории
                        и ее дочерних категорий. Отображение товаров осуществляется с использованием бесконечной
                        пагинации, а для отображения изображений применяется техника lazy loading (отложенная загрузка
                        изображений).
                    </p>
                </li>
                <li>
                    <h3 className={classes.listTitle}>Каталог</h3>
                    <p className={classes.listItemText}>
                        С сервера загружаются категории с глубиной вложенности от 0 до 2. Категории передаются во
                        всплывающее окно (popup) для отображения категорий с учетом их уровня вложенности.
                    </p>
                </li>
                <li>
                    <h3 className={classes.listTitle}>Предосмотр товара</h3>
                    <p className={classes.listItemText}>
                        У каждой карточки товара есть кнопка "Подробнее", которая при нажатии открывает всплывающее окно
                        (popup) с более подробной информацией о товаре, включая все изображения, товары из группы (в
                        планах), цену и другие детали.
                    </p>
                </li>
            </ul>
            <h2 className={classes.subTitle}>Прочее:</h2>
            <p className={classes.listItemText}>У меня есть верстка страницы товара, включающая различные компоненты,
                такие как комментарии, рейтинг и другие. Однако, пока отсутствует реализация серверной логики. На
                странице также присутствует компонент в футере, который при ширине экрана 1024 пикселей или меньше
                преобразуется в спойлер.</p>
        </div>
    );
};

export default HomePageComponent;



